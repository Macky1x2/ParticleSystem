#pragma kernel ParticleMain

#define NUM_THREAD_X 8*8*8
#define NUM_THREAD_Y 1
#define NUM_THREAD_Z 1

#include "UnityCG.cginc"

struct Particle {
    float3 velocity;
    float3 position;
    float scale;
    float lifetime;
};

RWStructuredBuffer<Particle> particleDataBuffer;

float deltaTime;

int initNum;
Particle initInfo;

[numthreads(NUM_THREAD_X, 1, 1)]
void ParticleMain(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    Particle p = particleDataBuffer[index];

    if (p.lifetime > 0) {
        p.position += p.velocity * deltaTime;
        p.lifetime -= deltaTime;

        particleDataBuffer[index] = p;
    }
}

[numthreads(NUM_THREAD_X, 1, 1)]
void InitSomeParticle(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    Particle p = particleDataBuffer[index];

    if (p.lifetime <= 0) {

        p.velocity = initInfo.velocity;
        p.position = initInfo.position;
        p.scale = initInfo.scale;
        p.lifetime = initInfo.lifetime;
    }
}