#pragma kernel ParticleMain
#pragma kernel SpawnParticle

#define NUM_THREAD_X 8*8*8
#define NUM_THREAD_Y 1
#define NUM_THREAD_Z 1

#include "UnityCG.cginc"

struct Particle {
    float3 velocity;
    float3 position;
    float scale;
    float lifetime;
    float4 color;
};

RWStructuredBuffer<Particle> particleDataBuffer;
RWStructuredBuffer<Particle> spawnParticleDataBuffer;
RWStructuredBuffer<int> spawnCountDataBuffer;
AppendStructuredBuffer<uint> _DeadList;
ConsumeStructuredBuffer<uint> _ParticlePool;

float deltaTime;

int spawnNum;

[numthreads(NUM_THREAD_X, 1, 1)]
void ParticleMain(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;
    Particle p = particleDataBuffer[index];

    if (p.lifetime > 0) {
        p.position += p.velocity * deltaTime;
        p.lifetime -= deltaTime;

        particleDataBuffer[index] = p;

        if (p.lifetime <= 0) {
            _DeadList.Append(index);
        }
    }
}

//[numthreads(NUM_THREAD_X, 1, 1)]
//void InitSomeParticle(uint3 id : SV_DispatchThreadID)
//{
//    int index = id.x;
//    Particle p = particleDataBuffer[index];
//
//    if (p.lifetime <= 0) {
//
//        p.velocity = initInfo.velocity;
//        p.position = initInfo.position;
//        p.scale = initInfo.scale;
//        p.lifetime = initInfo.lifetime;
//    }
//}

[numthreads(NUM_THREAD_X, 1, 1)]
void SpawnParticle(uint3 id : SV_DispatchThreadID)
{
    /*int index = id.x;
    Particle p = particleDataBuffer[index];

    if (p.lifetime <= 0) {
        int myCount;
        InterlockedAdd(spawnCountDataBuffer[0], 1, myCount);
        if (myCount <= spawnNum) {
            p.velocity = spawnParticleDataBuffer[myCount - 1].velocity;
            p.position = spawnParticleDataBuffer[myCount - 1].position;
            p.scale = spawnParticleDataBuffer[myCount - 1].scale;
            p.lifetime = spawnParticleDataBuffer[myCount - 1].lifetime;
            p.color = spawnParticleDataBuffer[myCount - 1].color;

            particleDataBuffer[index] = p;
        }
    }*/

    int index = _ParticlePool.Consume();

    if (index != 0) {
        Particle p;

        p.velocity = spawnParticleDataBuffer[0].velocity;
        p.position = spawnParticleDataBuffer[0].position;
        p.scale = spawnParticleDataBuffer[0].scale;
        p.lifetime = spawnParticleDataBuffer[0].lifetime;
        p.color = spawnParticleDataBuffer[0].color;

        particleDataBuffer[index] = p;
    }
    
}